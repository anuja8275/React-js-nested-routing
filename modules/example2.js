/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 import React from 'react'
var Comment = React.createClass({
   getInitialState: function() {
      return { 
		divId: 'rowId-'+ ++divCounter,
        inputId: 'field-' + ++fieldCounter,
        Idspan:'fieldp-'+ ++spangenerate,
		editId:'editId-'+ ++editIdCounter,
		switchId:'switchId-'+ ++switchIdCounter,
		labelId:'labelId-'+ ++labelIdCounter,
		editIconId:'editIconId-'+ ++editIconCounter
        };
      },
    contentedit:function(itemid){
		console.log(itemid);
	var addspan= document.getElementById(itemid);
	   if(addspan)
	   {
		addspan.contentEditable = true;
	   }
    },
  render: function() {
  	 var props = this.props,
	  divId=this.state.divId,
      inputId = this.state.inputId,
      Idspan=this.state.Idspan,
	  editId=this.state.editId,
	  switchId=this.state.switchId,
	  labelId=this.state.labelId,
	  editIconId=this.state.editIconId
    return (
      <div className="tag__options__item" id={divId} key={divId}>
        <span id={Idspan}  className="tag__options__label myP" key={Idspan}>
          {this.props.author}
        </span>
        <span className="switch displayinline tag__options__toggle" key={switchId}>
       <input id={inputId} className="cmn-toggle cmn-toggle-round"  type="checkbox" checked={this.state.checked} key={inputId}/>
        <label htmlFor={inputId} key={labelId}>{props.label}</label>
        </span>
        <a href="#" className="hct-note" id={editId} key={editId} onClick={this.contentedit(Idspan)} >
        <span  className="glyphicon glyphicon-pencil  editSpan_icon" key={editIconId} >
        </span>
        </a>
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {
      data: [],
      showList: true,
      resetgreenbutton:true,
      showFormpost:true
      
    };
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
   handleClick:function(){
      this.setState({resetgreenbutton:!this.state.resetgreenbutton})
      this.setState({showList:!this.state.showList})
  },
  formhandle:function(){
    this.setState({showFormpost: !this.state.showFormpost});
  },
  render: function() {
    return (
      <div className="commentBox">
       <button type="button" className={this.state.resetgreenbutton ? "animated2" :"animated3"} 
          onClick={this.handleClick}>Change Condition
        </button>
        <CommentList data={this.state.data}  showList={this.state.showList}/>
        <div>
        
        </div>
          <CommentForm onCommentSubmit={this.handleCommentSubmit} showFormpost={this.state.showFormpost} />
      </div>
    );
  }
});
var fieldCounter = 0;
var spangenerate=0;
var divCounter=0;
var editIdCounter=0;
var switchIdCounter=0;
var labelIdCounter=0;
var editIconCounter=0;

var CommentList = React.createClass({
  getInitialState: function () {
    return {
        complete: (!!this.props.complete) || false
      };
  },
  render: function() {
    var commentNodes = this.props.data.map(function(comment,i) {
      return (
        <div >
        <Comment  key={comment.id} author={comment.author} key={i}>
          {comment.author}
        </Comment>
       </div>
      );
    });
    return (this.props.showList &&
      <div>
      <div className="commentList" showList={this.state.showList}>
        {commentNodes}
      </div>
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    if (!author) {
      return;
    }
    this.props.onCommentSubmit({author: author});
    this.setState({author: ''});
  },
handlespost:function(){
      alert("1");
},
  render: function() {
    return (this.props.showFormpost &&
      <div>
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}/>
        <input type="submit" value="Post" onClick={this.handlespost}/>
      </form>
      </div>
    );
  }
});




ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);
